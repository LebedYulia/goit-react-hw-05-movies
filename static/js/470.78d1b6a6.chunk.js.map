{"version":3,"file":"static/js/470.78d1b6a6.chunk.js","mappings":"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","sources":["components/MoviesList.jsx","components/SearchForm/SearchForm.styled.jsx","components/SearchForm/SearchForm.jsx","components/pages/Movies.jsx","components/services/Api.js"],"sourcesContent":["import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const MoviesList = ({ id, title }) => {\n  const location = useLocation();\n \n  return (\n    <Link to={`/movies/${id}`} state = {{from: location}}>\n      <li>{title}</li>\n    </Link>\n  );\n};\n","import {\n    Form as FormikForm,\n    Field as FormikField,    \n  } from 'formik';\n  import styled from '@emotion/styled';  \n\n  \n  export const Form = styled(FormikForm)`\n    display: flex;\n    align-items: center;\n    width: 100%;\n    max-width: 600px;\n    background-color: #fff;\n    border-radius: 3px;\n    overflow: hidden;\n  `;\n  \n  export const Field = styled(FormikField)`\n    display: inline-block;\n    width: 100%;\n    font: inherit;\n    font-size: 20px;\n    border: 1px solid grey;\n    border-radius: 4px;\n    outline: none;\n    padding: 10px;\n    \n      &::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n  `;\n  \n  export const SearchFormButton = styled.button`\n    display: inline-block;\n    width: 48px;\n    height: 48px;\n    border: 0; \n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n     &:hover {\n      opacity: 1;\n  }\n  `;","import React from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport PropTypes from 'prop-types';\nimport toast from 'react-hot-toast';\nimport { IoIosSearch } from 'react-icons/io';\nimport { Form, Field, SearchFormButton } from './SearchForm.styled';\n\nconst schema = yup.object().shape({\n  inputValue: yup.string(),\n});\n\n\n\nexport const SearchForm = ({ searchValue, onSubmit }) => { \n\n\n  const handleSubmit = value => {\n    if (value.inputValue.trim() === '') {\n      toast.error('Please, enter search query!');\n      return;\n    }\n    onSubmit(value);\n  };\n\n \n\n  return (\n    <>\n      <Formik\n        initialValues={{ inputValue: searchValue }}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <SearchFormButton type=\"submit\">\n            <IoIosSearch size=\"1.5em\" />\n          </SearchFormButton>\n\n          <Field\n            type=\"text\"\n            name=\"inputValue\"                      \n            placeholder=\"Search movies\"\n          />\n          <ErrorMessage name=\"inputValue\" />\n        </Form>\n      </Formik>\n    </>\n  );\n};\n\nSearchForm.propTypes = {\n  searchValue: PropTypes.string.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport toast from 'react-hot-toast';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { getImageByQuery } from 'components/services/Api';\nimport { MoviesList } from 'components/MoviesList';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [movies, setMovies] = useState();\n  const [search, setSearchParams] = useSearchParams();\n\n  const handleSearchFormSubmit = ({ inputValue }) => {\n    if (inputValue === searchQuery) {\n      return;\n    }\n    setSearchQuery(inputValue);\n    setSearchParams({ search: inputValue });\n  };\n\n  const searchValue = search.get('search') ?? '';\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n\n    async function onSearch() {\n      try {\n        const data = await getImageByQuery(searchQuery);\n        if (data.length === 0) {\n          toast.error(\n            'Sorry, there are no movies matching your search query. Please try again.'\n          );\n        }\n        setMovies([...data]);\n      } catch (error) {\n        toast.error('Something went wrong. Try again.');\n      }\n    }\n\n    onSearch();\n  }, [searchQuery]);\n\n  return (\n    <>\n      <SearchForm searchValue={searchValue} onSubmit={handleSearchFormSubmit} />\n      {movies && (\n        <ul>\n          {movies.map(({ id, title }) => (\n            <MoviesList key={id} title={title} id={id} />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst KEY = 'f15e9a3194e113470990f4a0e5a9c33f';\nconst baseURL = 'https://api.themoviedb.org/3';\n\nconst config = {\n  baseURL,   \n  params: {\n    api_key: KEY,\n    language: 'en-uk',\n  },\n};\n\nexport const getTrendingMovies = async () => {  \n\n  const response = await axios.get('/trending/movie/day', config);\n  const data = await response.data;  \n  return data.results;\n};\n\nexport const getMovieById = async id => {\n  \n  const response = await axios.get(`/movie/${id}`, config);\n  const data = await response.data;  \n  return data;\n};\n\nexport const getImageByQuery = async searchQuery => {\n  const config = {\n    baseURL,\n    params: {\n      api_key: KEY,\n      language: 'en-uk',\n      query: searchQuery,\n    },\n  };\n\n  const response = await axios.get(`search/movie`, config);\n  const data = await response.data;\n  console.log(data);\n  return data.results;\n};\n\nexport const getMovieAddInfo = async (id, option) => {\n  \n  const response = await axios.get(`/movie/${id}/${option}`, config);\n  const data = await response.data;  \n  return data;\n};\n"],"names":["MoviesList","id","title","location","useLocation","to","state","from","Form","styled","FormikForm","Field","FormikField","SearchFormButton","schema","yup","shape","inputValue","SearchForm","searchValue","onSubmit","initialValues","validationSchema","value","trim","toast","autoComplete","type","size","name","placeholder","useState","searchQuery","setSearchQuery","movies","setMovies","useSearchParams","search","setSearchParams","get","useEffect","getImageByQuery","data","length","onSearch","map","KEY","baseURL","config","params","api_key","language","getTrendingMovies","axios","response","results","getMovieById","query","console","log","getMovieAddInfo","option"],"sourceRoot":""}