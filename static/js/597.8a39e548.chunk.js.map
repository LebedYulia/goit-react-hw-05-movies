{"version":3,"file":"static/js/597.8a39e548.chunk.js","mappings":"+NAqDA,UAhDa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KAeA,IAZAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,8GAE2BC,EAAAA,EAAAA,IAAgBN,EAAS,WAFpD,OAEUO,EAFV,OAGIH,EAAWG,EAASC,MAHxB,gDAKIC,QAAQC,IAAR,MALJ,0DADc,uBAAC,WAAD,wBASdC,EACD,GAAE,CAACX,IAECG,EAAL,CAOA,OACE,iCACE,kCACA,wBACGA,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAT,OACX,2BACE,gBACEC,IAAKD,EAAY,UAVV,mCAUU,OAAmBA,GAT9B,wDAUNE,IAAKH,EACLI,MAAM,SAER,uBAAIJ,MANGA,EADE,QATlB,CAsBF,C,2KC5CKK,EAAM,mCACNC,EAAU,+BAEHC,EAAe,mCAAG,WAAMC,GAAN,kFACvBC,EAAS,CACbH,QAAAA,EACAI,OAAQ,CACNC,QAASN,EACTO,SAAU,QACVC,MAAOL,IANkB,SAUNM,EAAAA,GAAAA,IAAA,eAA0BL,GAVpB,cAUvBf,EAVuB,gBAWVA,EAASqB,KAXC,cAWvBA,EAXuB,yBAatBA,EAAKC,SAbiB,2CAAH,sDAgBtBP,EAAS,CACbH,QAAAA,EACAI,OAAQ,CACNC,QAASN,EACTO,SAAU,UAIDK,EAAiB,mCAAG,sGAERH,EAAAA,GAAAA,IAAU,sBAAuBL,GAFzB,cAEzBf,EAFyB,gBAGZA,EAASqB,KAHG,cAGzBA,EAHyB,yBAIxBA,EAAKC,SAJmB,2CAAH,qDAOjBE,EAAY,mCAAG,WAAMC,GAAN,yFAEHL,EAAAA,GAAAA,IAAA,iBAAoBK,GAAMV,GAFvB,cAEpBf,EAFoB,gBAGPA,EAASqB,KAHF,cAGpBA,EAHoB,yBAInBA,GAJmB,2CAAH,sDAOZtB,EAAe,mCAAG,WAAO0B,EAAIC,GAAX,yFAENN,EAAAA,GAAAA,IAAA,iBAAoBK,EAApB,YAA0BC,GAAUX,GAF9B,cAEvBf,EAFuB,gBAGVA,EAASqB,KAHC,cAGvBA,EAHuB,yBAItBA,GAJsB,2CAAH,uD","sources":["components/Cast.jsx","components/services/Api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { getMovieAddInfo } from 'components/services/Api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [credits, setCredits] = useState(null);\n  \n\n  useEffect(() => {\n    async function getCastInfo() {\n      try {\n        const response = await getMovieAddInfo(movieId, 'credits');\n        setCredits(response.cast);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getCastInfo();\n  }, [movieId]);\n\n  if (!credits) {\n    return;\n  }\n\n  const baseImgUrl = 'https://image.tmdb.org/t/p/w500';\n  const altPosterUrl = `https://via.placeholder.com/160x240.png?text=No+photo`;\n\n  return (\n    <>\n      <h2>Cast</h2>\n      <ul>\n        {credits.map(({ name, profile_path }) => (\n          <li key={name}>\n            <img\n              src={profile_path ? `${baseImgUrl}${profile_path}` : altPosterUrl}\n              alt={name}\n              width=\"160\"\n            />\n            <p>{name}</p>\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n\nCast.propTypes = {\n  name: PropTypes.string,\n  profile_path: PropTypes.string,  \n};\n\nexport default Cast;","import axios from 'axios';\n\nconst KEY = 'f15e9a3194e113470990f4a0e5a9c33f';\nconst baseURL = 'https://api.themoviedb.org/3';\n\nexport const getImageByQuery = async searchQuery => {\n  const config = {\n    baseURL,\n    params: {\n      api_key: KEY,\n      language: 'en-uk',\n      query: searchQuery,\n    },\n  };\n\n  const response = await axios.get(`search/movie`, config);\n  const data = await response.data;\n  \n  return data.results;\n};\n\nconst config = {\n  baseURL,   \n  params: {\n    api_key: KEY,\n    language: 'en-uk',\n  },\n};\n\nexport const getTrendingMovies = async () => {  \n\n  const response = await axios.get('/trending/movie/day', config);\n  const data = await response.data;  \n  return data.results;\n};\n\nexport const getMovieById = async id => {\n  \n  const response = await axios.get(`/movie/${id}`, config);\n  const data = await response.data;  \n  return data;\n};\n\nexport const getMovieAddInfo = async (id, option) => {\n  \n  const response = await axios.get(`/movie/${id}/${option}`, config);\n  const data = await response.data;  \n  return data;\n};\n"],"names":["movieId","useParams","useState","credits","setCredits","useEffect","getMovieAddInfo","response","cast","console","log","getCastInfo","map","name","profile_path","src","alt","width","KEY","baseURL","getImageByQuery","searchQuery","config","params","api_key","language","query","axios","data","results","getTrendingMovies","getMovieById","id","option"],"sourceRoot":""}